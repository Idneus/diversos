#include <SoftwareSerial.h>
#include <EBYTE.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

// Configuração de Wi-Fi
const char* ssid = "SEU SSID";				//mantenha as aspas
const char* password = "SENHA WIFI";			//mantenha as aspas
const char* ipAddress = "IP DE SUA ESCOLHA"; 		//caso queira Endereço IP fixo, não precisa por o /24 no final

// Configuração do MQTT
const char* mqttServer = "IP DO BROKER MQTT";
const int mqttPort = 1883;				//1883 é a porta padrão, mas deve observar se você não alterou na instalação do broker
const char* mqttUser = "USUARIO";
const char* mqttPassword = "iSENHA MQTT";
const char* mqttTopic = "MCU/recp/status"; 		// Tópico LoRa
const char* wifiTopic = "MCU/wifi/status"; 		// Novo tópico para conexão Wi-Fi
const char* mqttStatusTopic = "MCU/mqtt/status"; 	// Novo tópico para conexão MQTT

// Defina seu gateway e máscara de sub-rede, se necessário
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);

// Configurações do sensor LoRa para descoberta no Home Assistant (infelizmente esta parte ainda não funciona e não encontrei o motivo)
String lora_on = "{\"expire_after\": \"7200\", \"name\": \"LoRa Carro\", \"unique_id\": \"status_lora\", \"state_topic\": \"MCU/recp/status\", \"device_class\": \"sensor\", \"on_value\": \"on\", \"off_value\": \"off\"}";

// RECEPTOR
#define M0_LoRa   D1
#define M1_LoRa   D2
#define RX_LoRa   D6
#define TX_LoRa   D7
#define AUX_LoRa  D4

SoftwareSerial lora(RX_LoRa, TX_LoRa);
EBYTE LoRa(&lora, M0_LoRa, M1_LoRa, AUX_LoRa);

WiFiClient espClient;
PubSubClient client(espClient);

bool wifiConnected = false;

void setup() {
  Serial.begin(9600);
  lora.begin(9600);
  LoRa.init();
  LoRa.PrintParameters();
  LoRa.SetMode(MODE_NORMAL);
  
  IPAddress localIp;
  localIp.fromString(ipAddress);
  
  WiFi.config(localIp, gateway, subnet);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando ao Wi-Fi...");
  }
  wifiConnected = true; // Marca que o Wi-Fi está conectado

  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  // Publica o tópico MQTT Discovery no Home Assistant
  String discoveryTopic = "homeassistant/sensor/mcu/status/config";
  String discoveryPayload = lora_on;
  client.publish(discoveryTopic.c_str(), discoveryPayload.c_str(), true);
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mensagem recebida no tópico: ");
  Serial.print(topic);
  Serial.print(". Conteúdo: ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  if (lora.available() > 0) {
    String input = lora.readString();
    input.trim(); // Remove espaços em branco, incluindo \n
    Serial.print("A Mensagem do LoRa é: ");
    Serial.println(input);
    
    // Publica o valor no tópico MQTT "MCU/recp/status"
    client.publish(mqttStatusTopic, input.c_str(), true);
    Serial.print("Publicado no tópico MQTT: ");
    Serial.print(mqttStatusTopic);
    Serial.print(" - ");
    Serial.println(input);
  }

  if (wifiConnected) {
    // Aguarda 2 segundos após a conexão Wi-Fi antes de publicar o status
    delay(2000);
    // Publica informações do Wi-Fi no tópico MQTT
    String wifiInfo = "SSID: " + String(ssid) + " IP: " + WiFi.localIP().toString();
    client.publish(wifiTopic, wifiInfo.c_str());
    Serial.print("Conectado ao Wi-Fi. Publicado no tópico MQTT: ");
    Serial.print(wifiTopic);
    Serial.print(" - ");
    Serial.println(wifiInfo);
    wifiConnected = false; // Marca que o status de Wi-Fi foi publicado
  }
}

void reconnect() {
  while (!client.connected()) {
    if (client.connect("ESP8266Client", mqttUser, mqttPassword)) {
      Serial.println("Conectado ao servidor MQTT");
      delay(5000); // Adiciona um atraso de 3 segundos
      client.subscribe(mqttTopic);
      // Publica informações de conexão MQTT
      String mqttInfo = "Conectado ao servidor MQTT em " + String(mqttServer) + ":" + String(mqttPort);
      if (strcmp(mqttStatusTopic, "MCU/mqtt/status") == 0) {
        client.publish("MCU/mqtt/status", mqttInfo.c_str(), true); // Publica no novo tópico "MCU/mqtt/status"
      }
      Serial.print("Publicado no tópico MQTT: MCU/mqtt/status - ");
      Serial.println(mqttInfo);
    } else {
      Serial.print("Falha na conexão ao servidor MQTT. Tentando novamente em 5 segundos...");
      delay(5000);
    }
  }
}